// Mikro B2B System - Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum UserRole {
  ADMIN
  CUSTOMER
  SALES_REP   // Satış temsilcisi (sektör bazlı erişim)
  MANAGER     // Yönetici (tüm siparişleri görebilir)
}

enum CustomerType {
  BAYI       // A Segmenti
  PERAKENDE  // B Segmenti
  VIP        // C Segmenti
  OZEL       // D Segmenti
}

enum PriceType {
  INVOICED  // Faturalı
  WHITE     // Beyaz
}

enum OrderStatus {
  PENDING   // Bekliyor (admin onayı bekliyor)
  APPROVED  // Onaylandı ve Mikro'ya yazıldı
  REJECTED  // Reddedildi
}

enum OrderItemStatus {
  PENDING   // Bekliyor
  APPROVED  // Onaylandı
  REJECTED  // Reddedildi
}

enum CostCalculationMethod {
  LAST_ENTRY      // Son giriş fiyatı
  CURRENT_COST    // Güncel maliyet
  DYNAMIC         // Dinamik hesaplama (tarih ve fiyat farklarına göre)
}

// ==================== USERS ====================

model User {
  id            String        @id @default(uuid())
  email         String?       @unique // Optional: Cari kodu ile de login olunabilir
  password      String        // bcrypt hash
  name          String        // DEPRECATED: Use displayName or mikroName
  mikroName     String?       // Mikro'dan gelen orijinal isim (değişmez)
  displayName   String?       // Kullanıcının gösterilen ismi (düzenlenebilir)
  role          UserRole      @default(CUSTOMER)

  // Müşteri bilgileri (sadece CUSTOMER role için)
  customerType        CustomerType?
  mikroCariCode       String?       @unique // Mikro ERP'deki cari kodu
  vatDisplayPreference String       @default("WITH_VAT") // "WITH_VAT" | "WITHOUT_VAT"

  // Mikro'dan senkronize edilen cari bilgileri
  city                String?       // Şehir
  district            String?       // İlçe
  phone               String?       // Telefon
  isLocked            Boolean       @default(false) // Cari kilitli mi
  groupCode           String?       // Grup kodu
  sectorCode          String?       // Sektör kodu
  paymentTerm         Int?          // Vade günü
  hasEInvoice         Boolean       @default(false) // E-fatura var mı
  balance             Float         @default(0) // Güncel bakiye (TL)
  balanceUpdatedAt    DateTime?     // Bakiye güncellenme tarihi

  // Sales Rep için atanan sektör kodları (JSON array)
  // Örnek: ["İNTERNET", "HENDEK", "HUKUKİ"]
  assignedSectorCodes String[]      @default([])

  active        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  orders        Order[]
  cart          Cart?

  @@index([email])
  @@index([role])
  @@index([mikroCariCode])
  @@index([sectorCode])
}

// ==================== SETTINGS ====================

model Settings {
  id                        String                  @id @default(uuid())

  // Fazla stok hesaplama ayarları
  calculationPeriodMonths   Int                     @default(3)  // 1, 3, veya 6 ay (DEPRECATED - use calculationPeriodDays)
  calculationPeriodDays     Int                     @default(90) // Son X günlük satış ortalaması
  includedWarehouses        String[]                // ["DEPO1", "MERKEZ"]
  minimumExcessThreshold    Int                     @default(10) // Min fazla stok eşiği

  // Maliyet hesaplama yöntemi
  costCalculationMethod     CostCalculationMethod   @default(LAST_ENTRY)

  // Dinamik maliyet hesaplama parametreleri (JSON)
  // Örnek: { "dayThreshold": 30, "priceWeightNew": 0.7, "priceWeightOld": 0.3 }
  dynamicCostParams         Json?

  // KDV hesaplama formülü (beyaz fiyat için)
  // Varsayılan: cost * (1 + vat/2)
  whiteVatFormula           String                  @default("cost * (1 + vat/2)")

  // Son senkronizasyon
  lastSyncAt                DateTime?

  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
}

// ==================== CATEGORIES ====================

model Category {
  id              String                @id @default(uuid())
  mikroCode       String                @unique
  name            String

  active          Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  products        Product[]
  priceRules      CategoryPriceRule[]
}

// ==================== PRODUCTS ====================

model Product {
  id                      String    @id @default(uuid())
  mikroCode               String    @unique
  name                    String
  unit                    String    @default("ADET") // Birim

  categoryId              String
  category                Category  @relation(fields: [categoryId], references: [id])

  // Maliyet bilgileri (Mikro'dan sync)
  lastEntryPrice          Float?    // Son giriş fiyatı
  lastEntryDate           DateTime? // Son giriş tarihi
  currentCost             Float?    // Güncel maliyet (tanımlı)
  currentCostDate         DateTime? // Güncel maliyet tarihi
  vatRate                 Float     @default(0.18) // KDV oranı (0.18 = %18)

  // Hesaplanan maliyet (dinamik veya seçilen method'a göre)
  calculatedCost          Float?

  // Stok bilgileri (JSON - depo bazlı)
  // Örnek: {"DEPO1": 100, "DEPO2": 50, "MERKEZ": 75}
  warehouseStocks         Json      @default("{}")

  // Satış geçmişi (JSON - günlük)
  // Örnek: {"2024-01-15": 5, "2024-01-16": 3, "2024-01-17": 8}
  salesHistory            Json      @default("{}")

  // Bekleyen siparişler
  pendingCustomerOrders   Int       @default(0)
  pendingPurchaseOrders   Int       @default(0)

  // Hesaplanan fazla stok (toplam)
  excessStock             Int       @default(0)

  // Depo bazlı fazla stoklar (JSON)
  // Örnek: {"DEPO1": 20, "DEPO2": 10, "MERKEZ": 0}
  warehouseExcessStocks   Json      @default("{}")

  // Hesaplanan fiyatlar (JSON)
  // {
  //   "BAYI": { "INVOICED": 115, "WHITE": 110 },
  //   "PERAKENDE": { "INVOICED": 125, "WHITE": 110 },
  //   "VIP": { "INVOICED": 110, "WHITE": 110 },
  //   "OZEL": { "INVOICED": 120, "WHITE": 110 }
  // }
  prices                  Json      @default("{}")

  // Ürün resmi
  imageUrl                String?

  active                  Boolean   @default(true)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relations
  cartItems               CartItem[]
  orderItems              OrderItem[]
  priceOverrides          ProductPriceOverride[]

  @@index([mikroCode])
  @@index([excessStock])
  @@index([categoryId])
}

// ==================== PRICE RULES ====================

// Kategori bazlı kar marjları
model CategoryPriceRule {
  id              String        @id @default(uuid())

  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  customerType    CustomerType
  profitMargin    Float         // 0.15 = %15 kar marjı

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([categoryId, customerType])
}

// Ürün bazlı özel kar marjı (override)
model ProductPriceOverride {
  id              String        @id @default(uuid())

  productId       String
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  customerType    CustomerType
  profitMargin    Float         // Kategori marjını override eder

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([productId, customerType])
}

// ==================== CART ====================

model Cart {
  id              String        @id @default(uuid())

  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  items           CartItem[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model CartItem {
  id              String      @id @default(uuid())

  cartId          String
  cart            Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId       String
  product         Product     @relation(fields: [productId], references: [id])

  quantity        Int
  priceType       PriceType   // INVOICED veya WHITE
  unitPrice       Float       // O andaki fiyat (snapshot)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([cartId])
}

// ==================== ORDERS ====================

model Order {
  id              String        @id @default(uuid())
  orderNumber     String        @unique  // "ORD-2024-00001"

  userId          String
  user            User          @relation(fields: [userId], references: [id])

  status          OrderStatus   @default(PENDING)

  // Sipariş detayları
  items           OrderItem[]
  totalAmount     Float

  // Mikro'ya yazılan sipariş ID'leri
  // [invoiced_siparis_id, white_siparis_id] veya sadece [invoiced] veya [white]
  mikroOrderIds   String[]      @default([])

  // Admin notu
  adminNote       String?

  createdAt       DateTime      @default(now())
  approvedAt      DateTime?
  rejectedAt      DateTime?
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id              String            @id @default(uuid())

  orderId         String
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId       String?           // Optional - ürün silinirse null olabilir
  product         Product?          @relation(fields: [productId], references: [id])

  // Snapshot (sipariş anındaki bilgiler)
  productName     String
  mikroCode       String
  quantity        Int
  priceType       PriceType
  unitPrice       Float
  totalPrice      Float

  // Item-level approval (kısmi onay için)
  status          OrderItemStatus   @default(PENDING)
  rejectionReason String?           // Reddedilme sebebi

  // Mikro'ya yazılan sipariş ID (item bazında)
  mikroOrderId    String?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt

  @@index([orderId])
  @@index([status])
}

// ==================== SYNC LOGS ====================

model SyncLog {
  id                    String      @id @default(uuid())

  syncType              String      // "AUTO" | "MANUAL"
  status                String      // "RUNNING" | "SUCCESS" | "FAILED" | "PARTIAL"

  categoriesCount       Int         @default(0)
  productsCount         Int         @default(0)
  imagesDownloaded      Int         @default(0)
  imagesSkipped         Int         @default(0)
  imagesFailed          Int         @default(0)

  errorMessage          String?
  details               Json?       // Detaylı log bilgileri

  // Uyarılar (JSON array)
  // Örnek: [{ "type": "IMAGE_TOO_LARGE", "productCode": "B999", "message": "Resim çok büyük (25 MB)", "size": 26214400 }]
  warnings              Json?

  startedAt             DateTime    @default(now())
  completedAt           DateTime?

  @@index([syncType])
  @@index([status])
}

// ==================== CAMPAIGNS ====================

enum CampaignType {
  PERCENTAGE      // Yüzde indirim
  FIXED_AMOUNT    // Sabit tutar indirim
  BUY_X_GET_Y     // X al Y öde
}

model Campaign {
  id                    String        @id @default(uuid())
  name                  String
  description           String?

  type                  CampaignType  @default(PERCENTAGE)
  discountValue         Float         // Percentage: 0.15 = %15, Fixed: 50 = 50 TL

  minOrderAmount        Float?        // Minimum sipariş tutarı
  maxDiscountAmount     Float?        // Maksimum indirim tutarı

  startDate             DateTime
  endDate               DateTime
  active                Boolean       @default(true)

  // Targeting
  customerTypes         String[]      @default([]) // ["BAYI", "PERAKENDE"]
  categoryIds           String[]      @default([]) // Specific categories
  productIds            String[]      @default([]) // Specific products

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([active])
  @@index([startDate, endDate])
}

// ==================== ORDER TRACKING ====================

// Sipariş takip modülü ayarları
model OrderTrackingSettings {
  id                    String    @id @default(uuid())

  // Sync ayarları
  syncEnabled           Boolean   @default(true)
  syncSchedule          String    @default("0 8 * * 2,5") // DEPRECATED - use customerSyncSchedule

  // Müşteri email ayarları
  customerSyncSchedule  String    @default("0 8 * * 2,5") // Salı + Cuma, 08:00 (cron format)
  customerEmailEnabled  Boolean   @default(true)
  customerEmailSubject  String    @default("Bekleyen Siparişleriniz")

  // Tedarikçi email ayarları
  supplierSyncSchedule  String    @default("0 8 * * 2,5") // Salı + Cuma, 08:00 (cron format)
  supplierEmailEnabled  Boolean   @default(true)
  supplierEmailSubject  String    @default("Bekleyen Tedarikçi Siparişleri")

  // Email template
  emailEnabled          Boolean   @default(true) // DEPRECATED - use customerEmailEnabled
  emailSubject          String    @default("Bekleyen Siparişleriniz") // DEPRECATED - use customerEmailSubject
  emailTemplate         String    @default("default") // "default" veya custom HTML template

  // Son sync bilgisi
  lastSyncAt            DateTime?
  lastEmailSentAt       DateTime? // DEPRECATED - use lastCustomerEmailSentAt
  lastCustomerEmailSentAt DateTime?
  lastSupplierEmailSentAt DateTime?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

// Mikro'dan çekilen bekleyen siparişler (cache)
model PendingMikroOrder {
  id                    String    @id @default(uuid())

  // Sipariş bilgileri
  mikroOrderNumber      String    // "HENDEK-8162"
  orderSeries           String    // "HENDEK"
  orderSequence         Int       // 8162

  // Müşteri bilgileri
  customerCode          String    // "120.05.125"
  customerName          String    // "ÇAMSAN ENTEGRE..."
  customerEmail         String?   // Mikro'dan gelen email (cari_EMail)
  sectorCode            String?   // Sektör kodu (örn: "satıcı" = tedarikçi)

  // Tarihler
  orderDate             DateTime
  deliveryDate          DateTime?

  // Sipariş detayları (JSON array)
  // [{ productCode, productName, unit, quantity, deliveredQty, remainingQty, unitPrice, lineTotal, vat }]
  items                 Json

  // Toplamlar
  itemCount             Int       // Kalem sayısı
  totalAmount           Float     // Ara toplam (KDV hariç)
  totalVAT              Float     // Toplam KDV
  grandTotal            Float     // Genel toplam (KDV dahil)

  // Sync bilgisi
  syncedAt              DateTime  @default(now())

  // Email gönderildi mi?
  emailSent             Boolean   @default(false)
  emailSentAt           DateTime?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([customerCode])
  @@index([mikroOrderNumber])
  @@index([syncedAt])
  @@index([emailSent])
  @@index([sectorCode])
}

// Email gönderim logları
model EmailLog {
  id                    String    @id @default(uuid())

  // Alıcı bilgileri
  recipientEmail        String
  recipientName         String?
  customerCode          String?

  // Email bilgileri
  subject               String
  ordersCount           Int       // Kaç sipariş gönderildi
  totalAmount           Float     // Toplam tutar

  // Gönderim durumu
  success               Boolean   @default(false)
  errorMessage          String?

  // Brevo bilgileri
  brevoMessageId        String?

  sentAt                DateTime  @default(now())

  @@index([recipientEmail])
  @@index([customerCode])
  @@index([sentAt])
  @@index([success])
}
